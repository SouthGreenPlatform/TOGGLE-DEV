##########################################
# Block for generic command
##########################################

#Correct variable populating

foreach my $file (@{$fileList}) #Checking the number of files
{
	#Not considering the different index files
	next if $file =~ m/idx$/;
	next if $file =~ m/bai$/;
	
	if ($fileIn ne "NA") # Already a file recognized, but more than one in the previous folder
	{
		toolbox::exportLog("ERROR : $0 : there are more than one single file at $stepName step.\n",0);
    }
    else
    {
        $fileIn = $file;
    }
}

if ($fileIn eq "NA") #No file found in the previous folder
{
    toolbox::exportLog("ERROR : $0 : No file found in $previousDir at step $stepName.\n",0);
}

#Creation of a hash for providing the external info data if needed: reference, gff,....

my %localHash = ();

$localHash('reference')= $reference if defined $reference;
$localHash('gff')= $gff if defined $gff;


$softParameters = toolbox::extractHashSoft($optionRef,$stepName); # recovery of specific parameters

$fileOut = "$newDir"."/"."$readGroup".".GENERIC".$stepOrder.".TXT";
generic::generic($fileIn,$fileOut,$softParameters,\%localHash);   # Sending to generic::generic function