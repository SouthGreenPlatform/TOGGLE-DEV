if ($report)
{
    ##### PREVIOUS BLOCK

    # Mandatory beginning
    $fileList = toolbox::readDir($previousDir);
    $newDir = $previousDir;                                                                  
    ($shortDirName)=toolbox::extractPath($newDir);


    toolbox::exportLog("#########################################\nINFOS: Stat analysis start $previousDir $newDir \n#########################################\n",1);

    ##### END PREVIOUS BLOCK



    ##########################################
    # Statsmapping block
    ##########################################
    
    #Correct variable populating
    foreach my $file (@{$fileList})
    {
        toolbox::exportLog("DEBUG : $0 : $file .\n",1);
        # the file type is normally bam or sam
        if ($file =~ m/bam$|sam$/ and $samFileIn eq "NA")
        {
            $samFileIn = $file ; 
        }
        
        # the file type is normally vcf
        elsif ($file =~ m/vcf$|vcf\.gz$/ & $vcfFileIn eq "NA")
        { 
            $vcfFileIn  = $file  ; 
        }
        
        # the file type is normally fastq
        elsif ($file =~ m/fastq$|fastq.gz$|fq$|fq.gz$/) 
        {
            $fastqReverseIn = $file;
        }
        
        # the file type is normally fasta
        elsif ($file =~ m/fasta$|fasta.gz$|fa$|fa.gz$/ & $fastaFileIn ne "NA") 
        {
                $fastaFileIn = $file;
        }
    
        else
        {
            next; # if ($file =~ m/bai$|idx$|intervals$/);
            #toolbox::exportLog("ERROR : $0 : there are more than two input files (sam/bam, vcf) $file at $stepName step.\n",0);
        }
        
    }


    
    # if bam / sam
    if ($samFileIn ne "NA")                                                                       
    {
        $samFileOut = $newDir."/"."$readGroup".".PICARDTOOLSSORT.mapping.bam";
        toolbox::exportLog("-----  stats block : creatingMallingStatFileRaw : Je lis 1 $samFileIn", 1); 
        stats::creatingMappingStatFileRaw($samFileIn,$samFileOut);
    }
    # else vcf
    elsif ($vcfFileIn ne "NA")                                                                       
    {
        toolbox::exportLog("-----  stats block : creatingCallingStatFileRaw : Je lis 1 $vcfFileIn", 1);    
        stats::creatingCallingStatFileRaw($vcfFileIn);
    }
    # else fasta
    # else fastq
    elsif ($fastqReverseIn ne "NA")                                                                       
    {
        toolbox::exportLog("-----  stats block : creatingFastqStatFileRaw : Je lis repertoire $newDir", 1);    
        stats::creatingFastqStatFileRaw($newDir);
    }
}