#!/usr/bin/env perl


###################################################################################################################################
#
# This pipeline was automatically generated by TOGGLEv3 onTheFly version.
# It will be removed if the pipeline is correctly executed.
# If you can read this, there is a problem...
#
##################################################################################################################################

###################################################################################################################################
#
# Copyright 2014-2015 IRD-CIRAD
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/> or
# write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# You should have received a copy of the CeCILL-C license with this program.
#If not see <http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt>
#
# Intellectual property belongs to IRD, CIRAD and South Green developpement plateform for all versions also for ADNid for v2 and v3 and INRA for v3
# Version 1 written by Cecile Monat, Ayite Kougbeadjo, Christine Tranchant, Cedric Farcy, Mawusse Agbessi, Maryline Summo, and Francois Sabot
# Version 2 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Enrique Ortega-Abboud, Julie Orjuela-Bouniol, Sebastien Ravel, Souhila Amanzougarene, and Francois Sabot
# Version 3 written by Cecile Monat, Christine Tranchant, Cedric Farcy, Maryline Summo, Julie Orjuela-Bouniol, Sebastien Ravel, Gautier Sarah, and Francois Sabot
#
###################################################################################################################################




use strict;
use warnings;
use lib qw(./Modules);
use localConfig;
use Data::Dumper;
use Switch;


use bwa;
use cutadapt;
use fastqc;
use fastqUtils;
use gatk;
use pairing;
use picardTools;
use samTools;
use toolbox;
#TO BE COMPLETED ex topHat...


##########################################
# recovery of parameters/arguments given when the program is executed
##########################################
my $cmd_line=$0." @ARGV";
my ($nomprog)=$0=~/([^\/]+)$/;
unless ($#ARGV>=0)                                                                                          # if no argument given
{
  print <<"Mesg";
  perldoc $nomprog display the help
Mesg

  exit;
}

my %param = @ARGV;                                                                                          # get the parameters 
@param{ map { lc $_ } keys %param } = values %param;
if (not defined($param{'-d'}) or not defined($param{'-c'}) or not defined($param{'-r'}))
{
  print <<"Mesg";
  ERROR: Parameters -d or -c or -r are required.
  perldoc $nomprog display the help
Mesg
  exit;
}


##########################################
# recovery of initial informations/files
##########################################
my $initialDir = $param{'-d'};                                                # recovery of the name of the directory to analyse
my $fileConf = $param{'-c'};                                                                                # recovery of the name of the software.configuration.txt file
my $refFastaFile = $param{'-r'};                                                                               # recovery of the reference file
toolbox::existsDir($initialDir);                                                                            # check if this directory exists                                                                          # recovery of the reference file





##########################################
# Creation of IndividuSoft.txt for creation of logs files later
##########################################
my @pathIndividu = toolbox::extractPath($initialDir);
my $individu = $pathIndividu[0];
chdir "$initialDir";
my $infosFile = "individuSoft.txt";
#my $infosFile = "$pathIndividu[1]/individuSoft.txt";
open (F1, ">",$infosFile) or die ("ERROR: $0 : Cannot open the file $infosFile\n$!\n");
print F1 "$individu\n";
print F1 "Initialization\n";


my $indivName = `head -n 1 individuSoft.txt`;
chomp $indivName;

my $logFile=$indivName."_Global"."_log";
open (LOG, ">",$logFile) or die ("ERROR: $0 : Cannot open the file $logFile\n$!\n");
print LOG "#########################################\nINFOS: TOGGLE will start\n#########################################\n\n";

toolbox::checkFile($fileConf);                                                                              # check if this file exists
toolbox::checkFile($refFastaFile);                                                                          # check if the reference file exists


my $previousDir = toolbox::makeDir($initialDir."/0_initialFiles");
my $mvCommand = "mv * $previousDir/.";

toolbox::run($mvCommand);

my $fileList = toolbox::readDir($previousDir);                                   #recovery of the list of files in the 0_directory dir


my $hashConf=toolbox::readFileConf($fileConf);

my $hashOrder=toolbox::extractHashSoft($hashConf,"order"); #Picking up the options for the order of the pipeline



my @dirList; #List that will contain in order the different step directories
foreach my $position (sort {$a <=>$b} keys %{$hashOrder})
{
  my $directory = $initialDir."/".$position."_".$$hashOrder{$position};
  $directory =~ s/ /_/g; #Removing the spaces
  toolbox::makeDir($directory); # Create the folder associated with each steps
  push (@dirList,$directory); # Adding the newly created folder to the list of folders
}

#Switch and populating variable

my ($fastq1,$fastq2,$sam,$bam,$vcf);

switch (1)
{
  case (scalar @$fileList == 2 && $$fileList[0] =~ m/fastq|fq$/ && $$fileList[1] =~ m/fastq|fq$/) {$fastq1=$$fileList[0];$fastq2=$$fileList[1]; print "\nPaired fastq files"} #Two paired fastq files
  case (scalar @$fileList == 1 && $$fileList[0] =~ m/fastq|fq$/) {$fastq1=$$fileList[0]; print "\nSingle fastq file"} # Single fastq file
  case (scalar @$fileList == 1 && $$fileList[0] =~ m/sam$/) {$sam=$$fileList[0]; print "\nSingle SAM file"} # single SAM file
  case (scalar @$fileList == 1 && $$fileList[0] =~ m/bam$/) {$bam = $$fileList[0]; print "\nSingle BAM file"} # single BAM file
  case (scalar @$fileList == 1 && $$fileList[0] =~ m/vcf$/) {$vcf = $$fileList[0]; print "\nSingle VCF file"} #single VCF file
  case (scalar @$fileList > 2 && $$fileList[0] =~ m/sam|bam|vcf$/) {print "Multiple files, steps higher than 1000"} #multiple file for the case of step higher than 1000
  else { toolbox::exportLog("ERROR: The input files are not in a format usable by TOGGLE",0); } # Not the good formats
  
}


